plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'dagger.hilt.android.plugin'
    id 'kotlin-kapt'
}

android {
    compileSdk 31

    defaultConfig {
        minSdk 21
        targetSdk 31

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    flavorDimensions "stage"

    productFlavors {
        // Build this if client/pm wants apk with staging endpoints
        // All three flavors use the same google-services.json
        dev {
            dimension "stage"
            buildConfigField "String", "BASE_URL", "\"http://stapi-eal.gigrt.com/gma/\""
        }

        // Build this if client/pm wants apk with uat endpoints
        uat {
            dimension "stage"
            buildConfigField "String", "BASE_URL", "\"https://utapi-eal.rwsentosa.com/gma/\""
        }

        // Build this if client/pm wants apk with production endpoints or
        // once client/pm finally approved to upload to playstorel
        prod {
            dimension "stage"
            buildConfigField "String", "BASE_URL", "\"https://api-eal.rwsentosa.com/gma/\""
        }
    }
}

dependencies {
    implementation project(':shared')
    implementation project(':domain')
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "androidx.core:core-ktx:$versions.core_ktx"
    implementation group: 'javax.inject', name: 'javax.inject', version: '1'
    implementation "com.google.dagger:hilt-android:$versions.dagger"
    kapt "com.google.dagger:hilt-android-compiler:$versions.dagger"

    implementation "com.jakewharton.timber:timber:$versions.timber"

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$versions.coroutines"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$versions.coroutines"

    implementation "com.tencent:mmkv-static:${versions.mmkv}"

    //Firebase
    implementation platform('com.google.firebase:firebase-bom:26.3.0')
    implementation 'com.google.firebase:firebase-auth'
    implementation "com.google.firebase:firebase-database-ktx"

    api "com.squareup.retrofit2:retrofit:${versions.retrofit}"
    api "com.squareup.retrofit2:converter-moshi:${versions.retrofit}"
    api "com.squareup.retrofit2:converter-gson:${versions.gson}"
    api "com.squareup.okhttp3:logging-interceptor:${versions.loggingInterceptor}"

    implementation "com.jakewharton.threetenabp:threetenabp:$versions.threetenabp"

    // paging
    implementation "androidx.paging:paging-runtime-ktx:${versions.paging}"

    // Chucker
    debugImplementation "com.github.chuckerteam.chucker:library:$versions.chucker"
    //releaseImplementation "com.github.chuckerteam.chucker:library:$versions.chucker"
    releaseImplementation "com.github.chuckerteam.chucker:library-no-op:$versions.chucker"

    testImplementation "junit:junit:$versions.junit"
    testImplementation "org.mockito:mockito-core:${versions.mockito}"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:${versions.mockitoKotlin}"
    androidTestImplementation "com.google.truth:truth:$versions.truth"

    androidTestImplementation "androidx.test.ext:junit:$versions.junitExt"
    androidTestImplementation "com.google.truth:truth:$versions.truth"
    androidTestImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:${versions.mockitoKotlin}"
}